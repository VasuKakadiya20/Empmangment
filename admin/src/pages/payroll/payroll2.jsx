import React, { useEffect, useState } from "react";
import { fetchDataFromApi } from "../../uttils/api";
import userimg from "../../assets/images/user.png";
import { FaFileInvoice, FaChevronLeft, FaChevronRight } from "react-icons/fa";
import Box from "@mui/material/Box";
import FormControl from "@mui/material/FormControl";
import InputLabel from "@mui/material/InputLabel";
import Select from "@mui/material/Select";
import MenuItem from "@mui/material/MenuItem";
import { toast, ToastContainer } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import jsPDF from "jspdf";
import { autoTable } from "jspdf-autotable";
import { FaFileExcel } from "react-icons/fa";
import * as XLSX from "xlsx";
import { saveAs } from "file-saver";
import { data } from "react-router-dom";

const PayrollTable2 = () => {
  const [payrollData, setPayrollData] = useState([]);
  const [page, setPage] = useState(10);

  const handleChange = (event) => {
    setPage(event.target.value);
  };

  useEffect(() => {
    const loadPayrollForAll = async () => {
      try {
        const employees = await fetchDataFromApi("/emp/");

        const currentMonth = new Date().getMonth();
        const currentYear = new Date().getFullYear();

        const payrollPromises = employees.map(async (emp) => {
          const basicSalary = emp.Salary || 0;
          const perDay = basicSalary / 24;

          const leaveData = await fetchDataFromApi(`/leave/status/${emp.name}`);
          const approvedLeaves = leaveData.filter((l) => l.Status === "Approved");
          let totalLeaves = 0;
          approvedLeaves.forEach((l) => {
            const leaveStart = new Date(l.leaveFrom);
            const leaveEnd = new Date(l.leaveTo);
            for (let d = new Date(leaveStart); d <= leaveEnd; d.setDate(d.getDate() + 1)) {
              if (d.getMonth() === currentMonth && d.getFullYear() === currentYear) {
                totalLeaves += 1;
              }
            }
          });

          const attData = await fetchDataFromApi(`/att/attendance/${emp.name}`);
          const monthlyAttendance = attData.filter((a) => {
            const attDate = new Date(a.date);
            return attDate.getMonth() === currentMonth && attDate.getFullYear() === currentYear;
          });

          let fullDays = 0;
          let halfDays = 0;

          monthlyAttendance.forEach((day) => {
            if (day.totalHours) {
              const [h, m] = day.totalHours.split(":").map(Number);
              const minutes = h * 60 + m;
              if (minutes >= 495) fullDays += 1;
              else halfDays += 1;
            }
          });

          const deduction = totalLeaves * perDay + halfDays * (perDay / 2);
          const netSalary = basicSalary - deduction;
          return {
            name: emp.name,
            profileImage: emp.profileImage,
            basicSalary,
            totalLeaves,
            fullDays,
            halfDays,
            netSalary: Math.round(netSalary),
          };
        });


        const results = await Promise.all(payrollPromises);
        setPayrollData(results);
      } catch (err) {
        toast.error("Error fetching payroll data");
      }
    };

    loadPayrollForAll();
  }, []);

  const downloadPayslipPDF = (item) => {
    const { name, totalLeaves, fullDays, halfDays, basicSalary, netSalary } = item;
    const halfDayDeduction = (basicSalary / 24 / 2) * halfDays;
    const leaveDeduction = (basicSalary / 24) * totalLeaves;
    const totalDeduction = leaveDeduction + halfDayDeduction;

    const doc = new jsPDF();

    doc.setFontSize(24);
    doc.setFont("helvetica", "bold");
    doc.text("Payroll Slip", 105, 25, { align: "center" });

    doc.setFontSize(16);
    doc.setFont("helvetica", "normal");
    doc.text(`Employee Name: ${name}`, 20, 50);
    doc.text(`Salary: Rs ${basicSalary}`, 20, 60);

    autoTable(doc, {
      startY: 75,
      head: [["Description", "Value"]],
      body: [
        ["Full Days :-", `${fullDays} Days`],
        ["Half Days :-", `${halfDays} Days`],
        ["Leaves :-", `${totalLeaves} Days`],
        ["Deduction Rs :-", Math.round(totalDeduction)],
        ["Payable Salary Rs :-", netSalary],
      ],
      theme: "grid",
      headStyles: {
        fillColor: [17, 58, 105],
        textColor: 255,
        fontStyle: "bold",
        fontSize: 14,
      },
      styles: {
        fontSize: 14,
        cellPadding: 6,
      },
    });

    doc.setFontSize(12);
    doc.text(
      "Generated by TeamTrack - Admin",
      105,
      doc.internal.pageSize.height - 15,
      { align: "center" }
    );

    doc.save(`${name}_Payslip.pdf`);
  };

  const downloadAttendanceExcel = async (emp) => {
    try {
      const currentMonth = new Date().getMonth();
      const currentYear = new Date().getFullYear();

      const attData = await fetchDataFromApi(`/att/attendance/${emp.name}`);
      const leaveData = await fetchDataFromApi(`/leave/status/${emp.name}`);
      const approvedLeaves = leaveData.filter((l) => l.Status === "Approved");

      let totalLeaves = 0;
      let totalFulldays = 0;
      let totalhalfday = 0;
      let basicSalary = emp.basicSalary || 0;
      let perDay = basicSalary / 24;

      approvedLeaves.forEach((l) => {
        const leaveStart = new Date(l.leaveFrom);
        const leaveEnd = new Date(l.leaveTo);
        for (let d = new Date(leaveStart); d <= leaveEnd; d.setDate(d.getDate() + 1)) {
          if (d.getMonth() === currentMonth && d.getFullYear() === currentYear)
            totalLeaves += 1;
        }
      });

      const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();
      const records = [];

      for (let day = 1; day <= daysInMonth; day++) {
        const date = new Date(currentYear, currentMonth, day);
        const dateStr = `${currentYear}-${String(currentMonth + 1).padStart(2, "0")}-${String(day).padStart(2, "0")}`;

        let leaveApplied = approvedLeaves.some((l) => {
        const leaveStart = new Date(`${l.leaveFrom}T00:00:00`);
        const leaveEnd = new Date(`${l.leaveTo}T23:59:59`);
          return date >= leaveStart && date <= leaveEnd;
        });

        const attForDay = attData.find((a) => {
          const attDate = new Date(a.date);
          return (
            attDate.getDate() === day &&
            attDate.getMonth() === currentMonth &&
            attDate.getFullYear() === currentYear
          );
        });

        let status = "Absent";
        let clockIn = "";
        let breakIn = "";
        let breakOut = "";
        let clockOut = "";
        let TotalHours = "";

        if (leaveApplied) {
          status = "Leave";
        } else if (attForDay) {
          clockIn = attForDay.firstIn || "";
          breakIn = attForDay.break || "";
          breakOut = attForDay.breakOut || "";
          clockOut = attForDay.lastOut || "";
          TotalHours = attForDay.totalHours || "";

          if (attForDay.totalHours) {
            const [h, m] = attForDay.totalHours.split(":").map(Number);
            const minutes = h * 60 + m;
            if (minutes >= 495) {
              status = "Full Day";
              totalFulldays += 1;
            } else {
              status = "Half Day";
              totalhalfday += 1;
            }
          }
        }

        records.push([
          dateStr,
          clockIn,
          breakIn,
          breakOut,
          clockOut,
          TotalHours,
          status,
        ]);
      }

      let leaveDeduction = perDay * totalLeaves;
      let halfDayDeduction = totalhalfday * (perDay / 2);
      let Deduction = leaveDeduction + halfDayDeduction
      let Salary = basicSalary - Deduction

      const header = [
        [`Employee Name :`, emp.name],
        [""],
        ["Date", "Clock In", "Break In", "Break Out", "Clock Out", "Total Hours", "Status"],
      ];

      const summary = [
        [""],
        ["Total Full Days :", "", totalFulldays],
        ["Total Half Days :", "", totalhalfday],
        ["Total Leaves :", "", totalLeaves],
      ];
      const payroll = [
        [""],
        ["Salary :", "", basicSalary],
        ["Leaves Deduction :", "", leaveDeduction],
        ["Half Days Deduction:", "", halfDayDeduction],
        [""],
        ["Payable Salary :", "", Math.round(Salary)]
      ];

      const worksheet = XLSX.utils.aoa_to_sheet([...header, ...records, ...summary, ...payroll]);
      const totalCols = Math.max(
        ...[...header, ...records, ...summary, ...payroll].map((row) => row.length)
      );

      worksheet['!cols'] = Array(totalCols).fill({ wch: 17 });
      const workbook = XLSX.utils.book_new();
      XLSX.utils.book_append_sheet(workbook, worksheet, "Attendance");

      const excelBuffer = XLSX.write(workbook, { bookType: "xlsx", type: "array" });
      saveAs(new Blob([excelBuffer], { type: "application/octet-stream" }), `${emp.name}_Attendance.xlsx`);

    } catch (err) {
      toast.error("Error generating Excel");
    }
  };

  return (
    <>
      <ToastContainer position="top-right" autoClose={3000} theme="colored" />

      <div className="attendance mt-5">
        <div className="attendance-container mt-5">
          <h2 className="table-title">Payroll Management</h2>
          <div className="table-wrapper">
            <div className="table-header">
              <span>Employee Payroll</span>
            </div>
            <table>
              <thead>
                <tr>
                  <th></th>
                  <th>Employee Name</th>
                  <th>Basic Salary</th>
                  <th>Approved Leaves</th>
                  <th>Full Days</th>
                  <th>Half Days</th>
                  <th>Net Salary</th>
                  <th>All Data</th>
                  <th>Payslip</th>
                </tr>
              </thead>
              <tbody>
                {payrollData.map((item, index) => (
                  <tr key={index}>
                    <td>
                      <input type="checkbox" />
                    </td>
                    <td className="emp-name">
                      <img
                        src={item.profileImage ? item.profileImage : userimg}
                        alt={item.name}
                      />
                      {item.name}
                    </td>
                    <td>₹ {item.basicSalary}</td>
                    <td>{item.totalLeaves}</td>
                    <td>{item.fullDays}</td>
                    <td>{item.halfDays}</td>
                    <td>₹ {item.netSalary}</td>
                    <td>
                      <FaFileExcel
                        className="action-icon"
                        onClick={() => downloadAttendanceExcel(item)}
                      />
                    </td>
                    <td>
                      <FaFileInvoice
                        className="action-icon"
                        onClick={() => downloadPayslipPDF(item)}
                      />
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>

            <div className="pagination">
              <div className="page">
                <Box sx={{ minWidth: 120 }}>
                  <FormControl fullWidth>
                    <InputLabel id="demo-simple-select-label">Page</InputLabel>
                    <Select
                      labelId="demo-simple-select-label"
                      id="demo-simple-select"
                      value={page}
                      label="page"
                      onChange={handleChange}
                    >
                      <MenuItem value={10}>10</MenuItem>
                      <MenuItem value={20}>20</MenuItem>
                      <MenuItem value={30}>30</MenuItem>
                    </Select>
                  </FormControl>
                </Box>
              </div>
              <span className="arrows">
                <span style={{ marginRight: "20px" }}>
                  <FaChevronLeft />
                </span>
                <span>
                  <FaChevronRight />
                </span>
              </span>
            </div>
          </div>
        </div>
      </div>
    </>
  );
};

export default PayrollTable2;


        