import React, { useEffect, useState } from "react";
import { fetchDataFromApi } from "../../uttils/api";
import userimg from "../../assets/images/user.png";
import { FaFileInvoice, FaChevronLeft, FaChevronRight } from "react-icons/fa";
import Box from "@mui/material/Box";
import FormControl from "@mui/material/FormControl";
import InputLabel from "@mui/material/InputLabel";
import Select from "@mui/material/Select";
import MenuItem from "@mui/material/MenuItem";
import { toast, ToastContainer } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import jsPDF from "jspdf"; 
import { autoTable } from "jspdf-autotable"; 

const PayrollTable = () => {
  const [payrollData, setPayrollData] = useState([]);
  const [page, setPage] = useState(10);

  const handleChange = (event) => {
    setPage(event.target.value);
  };

useEffect(() => {
  const loadPayrollForAll = async () => {
    try {
      const employees = await fetchDataFromApi("/emp/");

      const currentMonth = new Date().getMonth();
      const currentYear = new Date().getFullYear();

      const payrollPromises = employees.map(async (emp) => {
        const basicSalary = emp.Salary || 0;
        const perDay = basicSalary / 24;

        const leaveData = await fetchDataFromApi(`/leave/status/${emp.name}`);
        const approvedLeaves = leaveData.filter((l) => l.Status === "Approved");
        let totalLeaves = 0;
        approvedLeaves.forEach((l) => {
          const leaveStart = new Date(l.leaveFrom);
          const leaveEnd = new Date(l.leaveTo);
          for (let d = new Date(leaveStart); d <= leaveEnd; d.setDate(d.getDate() + 1)) {
            if (d.getMonth() === currentMonth && d.getFullYear() === currentYear) {
              totalLeaves += 1;
            }
          }
        });

        const attData = await fetchDataFromApi(`/att/attendance/${emp.name}`);
        const monthlyAttendance = attData.filter((a) => {
          const attDate = new Date(a.date);
          return attDate.getMonth() === currentMonth && attDate.getFullYear() === currentYear;
        });

        let fullDays = 0;
        let halfDays = 0;

        monthlyAttendance.forEach((day) => {
          if (day.totalHours) {
            const [h, m] = day.totalHours.split(":").map(Number);
            const minutes = h * 60 + m;
            if (minutes >= 495) fullDays += 1;
            else halfDays += 1;
          }
        });

        const deduction = totalLeaves * perDay + halfDays * (perDay / 2);
        const netSalary = basicSalary - deduction;
       return {
          name: emp.name,
          profileImage: emp.profileImage,
          basicSalary,
          totalLeaves,
          fullDays,
          halfDays,
          netSalary: Math.round(netSalary),
        };
      });
      

      const results = await Promise.all(payrollPromises); 
      setPayrollData(results); 
    } catch (err) {
      toast.error("Error fetching payroll data");
    }
  };

  loadPayrollForAll();
}, []);

const downloadPayslipPDF = (item) => {
  const { name, totalLeaves, fullDays, halfDays, basicSalary, netSalary } = item;
  const halfDayDeduction = (basicSalary / 24 / 2) * halfDays;
  const leaveDeduction = (basicSalary / 24) * totalLeaves;
  const totalDeduction = leaveDeduction + halfDayDeduction;

  const doc = new jsPDF();

  doc.setFontSize(24); 
  doc.setFont("helvetica", "bold");
  doc.text("Payroll Slip", 105, 25, { align: "center" });

  doc.setFontSize(16);
  doc.setFont("helvetica", "normal");
  doc.text(`Employee Name: ${name}`, 20, 50);
  doc.text(`Basic Salary: Rs ${basicSalary}`, 20, 60);

  autoTable(doc, {
    startY: 75, 
    head: [["Description", "Value"]],
    body: [
      ["Total Leaves", totalLeaves],
      ["Full Days", fullDays],
      ["Half Days", halfDays],
      ["Deduction Rs", Math.round(totalDeduction)],
      ["Payable Salary Rs", netSalary],
    ],
    theme: "grid",
  headStyles: {
  fillColor: [17, 58, 105],  
  textColor: 255,
  fontStyle: "bold",
  fontSize: 14,
},
    styles: {
      fontSize: 14, 
      cellPadding: 6, 
    },
  });

  doc.setFontSize(12);
  doc.text(
    "Generated by TeamTrack - Admin",
    105,
    doc.internal.pageSize.height - 15,
    { align: "center" }
  );

  doc.save(`${name}_Payslip.pdf`);
};


  return (
    <>
      <ToastContainer position="top-right" autoClose={3000} theme="colored" />

      <div className="attendance mt-5">
        <div className="attendance-container mt-5">
          <h2 className="table-title">Payroll Management</h2>
          <div className="table-wrapper">
            <div className="table-header">
              <span>Employee Payroll</span>
            </div>
            <table>
              <thead>
                <tr>
                  <th></th>
                  <th>Employee Name</th>
                  <th>Basic Salary</th>
                  <th>Approved Leaves</th>
                  <th>Full Days</th>
                  <th>Half Days</th>
                  <th>Net Salary</th>
                  <th>Payslip</th>
                </tr>
              </thead>
              <tbody>
                {payrollData.map((item, index) => (
                  <tr key={index}>
                    <td>
                      <input type="checkbox" />
                    </td>
                    <td className="emp-name">
                      <img
                        src={item.profileImage ? item.profileImage : userimg}
                        alt={item.name}
                      />
                      {item.name}
                    </td>
                    <td>₹ {item.basicSalary}</td>
                    <td>{item.totalLeaves}</td>
                   <td>{item.fullDays}</td>
                    <td>{item.halfDays}</td>
                    <td>₹ {item.netSalary}</td>
                    <td>
                   <FaFileInvoice
                    className="action-icon"
                    onClick={() => downloadPayslipPDF(item)}
                    />
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>

            <div className="pagination">
              <div className="page">
                <Box sx={{ minWidth: 120 }}>
                  <FormControl fullWidth>
                    <InputLabel id="demo-simple-select-label">Page</InputLabel>
                    <Select
                      labelId="demo-simple-select-label"
                      id="demo-simple-select"
                      value={page}
                      label="page"
                      onChange={handleChange}
                    >
                      <MenuItem value={10}>10</MenuItem>
                      <MenuItem value={20}>20</MenuItem>
                      <MenuItem value={30}>30</MenuItem>
                    </Select>
                  </FormControl>
                </Box>
              </div>    
              <span className="arrows">
                <span style={{ marginRight: "20px" }}>
                  <FaChevronLeft />
                </span>
                <span>
                  <FaChevronRight />
                </span>
              </span>
            </div>
          </div>
        </div>
      </div>
    </>
  );
};

export default PayrollTable;
